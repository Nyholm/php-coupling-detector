{
  "name": "PHP Coupling Detector",
  "tagline": "Detect all the coupling issues of your project with respect to the coupling rules you have defined.",
  "body": "At the moment, only PHP coupling issues are detected by analyzing the use statements of the classes in your project. \r\nBut adding a new kind of coupling detections is doable in the future. We could for example imagine to detect the \r\n coupling issues of Symfony services that are defined in YAML or XML\r\n\r\nAt the moment, 3 types of rules are supported:\r\n\r\n* _forbidden_: A node respects such a rule if no rule token is present in the node. In case the node does not respect this rule, an error violation will be sent.\r\n* _discouraged_: A node respects such a rule if no rule token is present in the node. In case the node does not respect this rule, a warning violation will be sent.\r\n* _only_: A node respects such a rule if the node contains only tokens defined in the rule. In case the node does not respect this rule, an error violation will be sent.\r\n\r\n## Requirements\r\n\r\nPHP needs to be a minimum version of PHP 5.3.6.\r\n\r\n## Installation\r\n\r\n### Globally (Composer)\r\n\r\nTo install PHP-Coupling-Detector, install Composer and issue the following command:\r\n\r\n.. code-block:: bash\r\n\r\n    $ ./composer.phar global require akeneo/php-coupling-detector\r\n\r\nThen, make sure you have ``~/.composer/vendor/bin`` in your ``PATH``, and\r\nyou're good to go:\r\n\r\n.. code-block:: bash\r\n\r\n    export PATH=\"$PATH:$HOME/.composer/vendor/bin\"\r\n\r\n## Usage\r\n\r\nThe detect command detects coupling problems for a given file or directory depending on the\r\n coupling rules that have been defined:\r\n \r\n     php bin/php-coupling-detector detect /path/to/dir\r\n     php bin/php-coupling-detector detect /path/to/file\r\n \r\n The exit status of the detect command can be: 0 if no violations have been raised, 10 in case of\r\n warnings and 99 in case of errors.\r\n \r\n You can save the configuration in a ``.php_cd`` file in the root directory of\r\n your project. The file must return an instance of ``Akeneo\\CouplingDetector\\Configuration\\Configuration``,\r\n which lets you configure the rules and the directories that need to be analyzed.\r\n Here is an example below:\r\n \r\n     <?php\r\n     use \\Akeneo\\CouplingDetector\\Domain\\Rule;\r\n     use \\Akeneo\\CouplingDetector\\Domain\\RuleInterface;\r\n \r\n     $finder = new \\Symfony\\Component\\Finder\\Finder();\r\n     $finder\r\n         ->files()\r\n         ->name('*.php')\r\n         ->notPath('foo/bar/');\r\n \r\n     $rules = [\r\n         new Rule('foo', ['bar', 'baz'], RuleInterface::TYPE_FORBIDDEN),\r\n         new Rule('zoo', ['too'], RuleInterface::TYPE_DISCOURAGED),\r\n         new Rule('bli', ['bla', 'ble', 'blu'], RuleInterface::TYPE_ONLY),\r\n     ];\r\n \r\n     return new \\Akeneo\\CouplingDetector\\Configuration\\Configuration($rules, $finder);\r\n     ?>\r\n \r\n You can also use the default finder implementation if you want to analyse all the PHP files\r\n of your directory:\r\n \r\n     <?php\r\n     use \\Akeneo\\CouplingDetector\\Domain\\Rule;\r\n     use \\Akeneo\\CouplingDetector\\Domain\\RuleInterface;\r\n \r\n     $rules = [\r\n         new Rule('foo', ['bar', 'baz'], RuleInterface::TYPE_FORBIDDEN),\r\n         new Rule('zoo', ['too'], RuleInterface::TYPE_DISCOURAGED),\r\n         new Rule('bli', ['bla', 'ble', 'blu'], RuleInterface::TYPE_ONLY),\r\n     ];\r\n \r\n     return new \\Akeneo\\CouplingDetector\\Configuration\\Configuration(\r\n         $rules,\r\n         \\Akeneo\\CouplingDetector\\Configuration\\DefaultFinder\r\n     );\r\n     ?>\r\n \r\n With the ``--config-file`` option you can specify the path to the ``.php_cd`` file:\r\n \r\n     php bin/php-coupling-detector detect /path/to/dir --config-file=/path/to/my/configuration.php_cd\r\n\r\nWith the --format option you can specify the output format:\r\n    \r\n    php %command.full_name% /path/to/dir --format=dot",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}